name: QC Compliance Tracker CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
        
    - name: Run black formatting check
      run: black --check app/ tests/
      
    - name: Run isort import sorting check
      run: isort --check-only app/ tests/
      
    - name: Run flake8 linting
      run: flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      
    - name: Run mypy type checking
      run: |
        pip install -r requirements.txt
        mypy app/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout
        
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qc_test
        REDIS_URL: redis://localhost:6379/0
        TEST_MODE: true
      run: |
        echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV
        echo "REDIS_URL=${REDIS_URL}" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qc_test
        REDIS_URL: redis://localhost:6379/0
        PYTEST_TIMEOUT: 300
      run: |
        pytest tests/ -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=85 \
          --timeout=60 \
          -n auto
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qc_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/ -v \
          -m integration \
          --timeout=120
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: qc-compliance-tracker-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          pytest-report.xml

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
        
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: qc-compliance-tracker:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name qc-test \
          -p 8000:8000 \
          -e DATABASE_URL=sqlite:///test.db \
          -e REDIS_URL=redis://localhost:6379 \
          qc-compliance-tracker:test
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test API status endpoint  
        curl -f http://localhost:8000/api/v1/status
        
        # Stop container
        docker stop qc-test
        docker rm qc-test

  performance-test:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qc_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qc_perf
        REDIS_URL: redis://localhost:6379/0
      run: |
        # Start the application in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        
        # Wait for app to start
        sleep 10
        
        # Run performance tests
        locust -f tests/performance/locustfile.py \
          --host http://localhost:8000 \
          --users 10 \
          --spawn-rate 2 \
          --run-time 60s \
          --html performance-report.html \
          --headless
        
        # Stop application
        kill $APP_PID
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-report.html

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push to staging
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/qc-compliance-tracker:staging
          ghcr.io/${{ github.repository }}/qc-compliance-tracker:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment"
        # Add actual deployment commands here
        # e.g., kubectl apply, docker compose, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push to production
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/qc-compliance-tracker:latest
          ghcr.io/${{ github.repository }}/qc-compliance-tracker:v${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated release from CI/CD pipeline
          - Docker image: `ghcr.io/${{ github.repository }}/qc-compliance-tracker:v${{ github.run_number }}`
          
          ## Quality Gate Results
          - ✅ All tests passed
          - ✅ Security scan completed
          - ✅ Performance tests passed
          - ✅ Docker build successful
        draft: false
        prerelease: false
        
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        echo "Docker image: ghcr.io/${{ github.repository }}/qc-compliance-tracker:v${{ github.run_number }}"
        # Add actual production deployment commands here

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]] || [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
        fi
        
        # Add notification logic here (Slack, email, etc.)
        # Example:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"QC Compliance Tracker deployment status: ${{ job.status }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}